/*
 * Copyright 2018 Datamountaineer.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {

    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

ext {
    scalaMajorVersion = '2.11'
    scala = '2.11.12'
    scalaCheck = '1.13.4'
    scalaTest = '3.0.4'
    scalaLoggingVersion = '2.1.2'
    junit = '4.11'
    parquetVersion = "1.8.3"
    hiveVersion = "2.1.1"
    joddVersion = "4.1.4"
    hadoopVersion = "2.6.5"
    catsVersion = "1.1.0"

    // The following 4 need to align to compile against a particular version
    confluentVersion = '4.1.0'
    kafkaVersion = '1.1.0'
    dataMountaineerCommonVersion = "1.1.5"
    link4jVersion = "1.8.0"
    orcVersion = "1.5.2"
}

group = 'com.datamountaineer'
version = project.version
description = "stream-reactor"

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://packages.confluent.io/maven/" }
    maven { url "http://repo.typesafe.com/typesafe/releases/" }
}

configurations.all {
    exclude group: 'org.pentaho'
}

shadowJar {
    baseName = 'kafka-connect-hive'
    classifier = null
    version = project.version
}


dependencies {

    compile "org.scala-lang:scala-library:$scala"
    compile "org.scala-lang:scala-compiler:$scala"

    compile "com.typesafe.scala-logging:scala-logging-slf4j_$scalaMajorVersion:$scalaLoggingVersion"

    compile ("org.apache.kafka:connect-json:$kafkaVersion")
    compile "io.confluent:kafka-connect-avro-converter:$confluentVersion"
    compile "io.confluent:kafka-schema-registry:$confluentVersion"

    compile("org.apache.parquet:parquet-column:$parquetVersion")
    compile("org.apache.parquet:parquet-encoding:$parquetVersion")
    compile("org.apache.parquet:parquet-hadoop:$parquetVersion")
    compile("org.jodd:jodd-core:$joddVersion")
    compile("org.apache.hive:hive-jdbc:$hiveVersion")
    compile("org.apache.hive:hive-exec:$hiveVersion")
    compile("org.apache.hadoop:hadoop-common:$hadoopVersion")
    compile("org.apache.hadoop:hadoop-hdfs:$hadoopVersion")
    compile("org.apache.hadoop:hadoop-mapreduce:$hadoopVersion")
    compile("org.apache.hadoop:hadoop-mapreduce-client:$hadoopVersion")
    compile("org.apache.hadoop:hadoop-mapreduce-client-core:$hadoopVersion")
    compile("org.typelevel:cats-core_2.11:$catsVersion")

    compile("com.datamountaineer:kafka-connect-common:$dataMountaineerCommonVersion")
    compile "org.apache.calcite:calcite-linq4j:$link4jVersion"

    testCompile "org.scalacheck:scalacheck_$scalaMajorVersion:$scalaCheck"
    testCompile "org.scalatest:scalatest_$scalaMajorVersion:$scalaTest"
    testCompile "junit:junit:$junit"
    testCompile 'org.apache.logging.log4j:log4j:2.11.0'
    testRuntime 'org.pegdown:pegdown:1.1.0'
}
